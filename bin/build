#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir>

set -xeo pipefail

ver=nightly
mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
triple=x86_64-unknown-linux-gnu
rust_tarball=rust-$ver-$triple.tar.gz
cargo_tarball=cargo-nightly-$triple.tar.gz
rust="https://static-rust-lang-org.s3.amazonaws.com/dist/$rust_tarball"
#rust="http://people.mozilla.org/~acrichton/rust-nightly-x86_64-unknown-linux-gnu.tar.gz"
cargo="https://static-rust-lang-org.s3.amazonaws.com/cargo-dist/$cargo_tarball"
buildpack=$(dirname $(dirname $0))

if test -e $build/bin && ! test -d $build/bin
then
  echo >&2 " !     File bin exists and is not a directory."
  exit 1
fi

mkdir -p $cache/rust-$ver
cd $cache/rust-$ver
echo -n "-----> Installing rust $ver..."
curl -sO $rust
curl -sO $cargo
tar zxf $rust_tarball
tar zxf $cargo_tarball
rm -f $rust_tarball $cargo_tarball
echo "done"
cd $build

# Make sure we have the C++ runtime libraries required by the Rust nightly
# builds.
if [ -f $cache/lib/libstdc++.so.6.0.18 ]; then
  echo "-----> Using libstdc++.so.6.0.18"
else
  echo "-----> Downloading rust-support"
  cd $cache
  rm -rf lib
  curl -O https://s3.amazonaws.com/rust-builds/rust-support.tar.gz
  tar xzvf rust-support.tar.gz
  cd $build
fi
export LD_LIBRARY_PATH="$cache/lib:$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="/tmp/codon/vendor/lib/pkgconfig":$PKG_CONFIG_PATH

export PATH=$cache/rust-$ver/rust-$ver-$triple/bin:$PATH
export PATH=$cache/rust-$ver/cargo-nightly-$triple/bin:$PATH
export LD_LIBRARY_PATH=$cache/rust-$ver/rust-$ver-$triple/lib:$LD_LIBRARY_PATH
export SSL_CERT_DIR=/etc/ssl/certs
export GIT_SSL_NO_VERIFY=0
git config --global http.sslverify 0

cd $build

rustc -v
cargo -V
cargo build --release
